<types ns="_artdeco">
  <record name="ClosureStylesheetsConfig" desc="Configuration options.">
    <prop string name="path">
      The path to the closure JAR. You can use `closure-stylesheets-java` package
      to install it via Node.
    </prop>
    <arg opt type="string?" name="rootSelector">
      The parent class name to prepend to all rules. This makes all CSS rules scoped into that particular selector which is useful for compiling widgets.
    </arg>
    <prop boolean name="skipHTMLEscaping" default="false">
      By default, the compiler will escape `[<>\"&']` from output
      to make it suitable for safe embedding in HTML tags and attributes.
      When standalone CSS is generated, this is not necessary and can be skipped.
    </prop>
    <prop boolean name="expandBrowserPrefix" default="false">
      Expand CSS rules to include vendor-prefixed declarations.
    </prop>
    <prop opt string name="outputBrowserPrefix">
      The location of the file where to output the prefixed version of the CSS.
      Works only when `expandBrowserPrefix` is set.
      The filename should end with `.css` and the compiler will also create a `.json` file
      at the same location with the map to check for support.
    </prop>
    <prop opt type="!Array<string>" name="prefixes">
      CSS rule prefixes (`position:sticky`, `-ms-hyphens`.) to include in the main output CSS rather than browser prefix file.
    </prop>
    <prop boolean name="prettyPrint" default="false">
      Whether to format the output with newlines and indents so that it is more readable.
    </prop>
    <prop string name="sourceMap" opt>
      Provides a mapping from the generated output to their original source code location.
    </prop>
    <prop string name="rootSelector" opt>
      The string to prepend to selectors of each ruleset.
    </prop>
    <prop boolean name="allowUnrecognizedProperties" default="false">
      Allow unrecognized properties.
    </prop>
    <prop boolean name="preserveImportantComments" default="false">
      Preserve important comments from sources into minified output css. Important comments are marked with `/＊! ＊/`, `＠license`, or `＠preserve`.
    </prop>
    <prop string name="cssRenamingPrefix" opt>
      Add a prefix to all renamed css class names.
    </prop>
    <prop type="!Array<string>" name="whitelist" opt>
      Excluded classes from renaming.
    </prop>
    <prop string name="outputRenamingMap" opt>
      How to format the output from the CSS class renaming.
    </prop>
    <prop string name="inputRenamingMap" opt>
      The input filename for the CSS class renaming. The file must provide a map of class names that will be used for renaming. If a class name is not found in file, a new name will be generated.
      `--input-renaming-map`
    </prop>
    <prop string name="rename" opt>
      How CSS classes should be renamed. Defaults to NONE.
      Can be `CLOSURE`, `SIMPLE`, `DEBUG`.
    </prop>
    <prop type="!Array<string>" name="excludedClassesFromRenaming" opt>
      Pass the compiler a list of CSS class names that shouldn't be renamed.
    </prop>
  </record>
  <record name="ClosureReturn" desc="Returns stylesheet and rename map if successful, or parsed info, stderr and status otherwise.">
    <prop string opt name="block">
      Parsed error information with CLI colour.
    </prop>
    <prop string opt name="stderr">
      Full stderr output in case of error.
    </prop>
    <prop number opt name="status">
      Exit error code.
    </prop>
    <prop opt type="Object" name="renameMap">
      If renaming was on, this is the generated map parsed into an object.
    </prop>
    <prop opt string name="stylesheet">
      The actual compiled stylesheet in case of success.
    </prop>
  </record>
</types>