{
"version":3,
"file":"compile/closure-stylesheets.js",
"lineCount":212,
"mappings":"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",
"sources":["node_modules/child_process/index.js","node_modules/stream/index.js","node_modules/erotic/src/lib.js","node_modules/os/index.js","node_modules/@artdeco/clean-stack/src/index.js","node_modules/erotic/src/callback.js","node_modules/erotic/src/index.js","node_modules/catchment/src/lib/index.js","node_modules/catchment/src/index.js","node_modules/spawncommand/src/index.js","node_modules/path/index.js","node_modules/fs/index.js","node_modules/erte/src/index.js","src/lib.js","src/depack.js","src/index.js"],
"sourcesContent":["export default child_process\nexport const {\n  ChildProcess,\n  exec,\n  execFile,\n  execFileSync,\n  execSync,\n  fork,\n  spawn,\n  spawnSync,\n} = child_process","export default stream\nexport const {\n  Duplex,\n  PassThrough,\n  Readable,\n  Stream,\n  Transform,\n  Writable,\n} = stream","const getLastItem = (array) => {\n  const item = array[array.length - 1]\n  return item\n}\nconst getItemsFrom = (array, from) => array.slice(from)\n\n/**\n * Get a segment of the stack string, defaults are from = 0 and oneLine = false.\n * @param {string} stack the stack string\n * @param {number} [from=0] index from which to slice from\n * @param {boolean} [oneLine=false] Whether just first line must be returned\n * @returns {string} A stack segment starting from the specified line.\n */\nexport const getStackSegment = (stack, from = 0, oneLine = false) => {\n  if (from === 0 && !oneLine) {\n    return stack\n  }\n  const splitStack = stack\n    .split('\\n', oneLine ? from + 1 : undefined)\n  if (oneLine) {\n    const line = getLastItem(splitStack)\n    return line\n  } else {\n    const items = getItemsFrom(splitStack, from)\n    return items.join('\\n')\n  }\n}\n\n/**\n * Get the stack trace part of when the erotic function was called. Disregards\n * first two lines.\n * @param {string} stack error's stack\n * @param {boolean} [transparent] trim the top line as well\n * @returns {string} A part of stack\n */\nexport const getEntryStack = (stack, transparent = false) => {\n  const stackSegment = getStackSegment(stack, 2 + (transparent ? 1 : 0))\n  return stackSegment\n}\n\n/**\n * Get stack line of where the callback was called.\n * @param {string} stack Stack string.\n * @returns {string} Stack line.\n */\nexport const getCalleeStackLine = (stack) => {\n  const calleeStackLine = getStackSegment(stack, 2, true)\n  return calleeStackLine\n}\n\nexport const getStackHeading = message => `Error: ${message}`\n\n/**\n * Extract caller from the function's `arguments`.\n * @param {Object} args arguments\n * @returns {!Function} The caller function from `arguments.callee.caller`.\n */\nexport const getCallerFromArguments = (args) => {\n  const { callee: { caller } } = args\n  return caller\n}","export default os\nexport const {\n  EOL,\n  arch,\n  constants,\n  cpus,\n  endianness,\n  freemem,\n  homedir,\n  hostname,\n  loadavg,\n  networkInterfaces,\n  platform,\n  release,\n  tmpdir,\n  totalmem,\n  type,\n  uptime,\n  userInfo,\n} = os","import { homedir } from 'os'\n\nconst extractPathRegex = /\\s+at.*(?:\\(|\\s)(.*)\\)?/\nconst pathRegex = /^(?:(?:(?:node|(?:internal\\/[\\w/]*|.*node_modules\\/(?:IGNORED_MODULES)\\/.*)?\\w+)\\.js:\\d+:\\d+)|native)/\n\nconst homeDir = homedir()\n\n/**\n * Remove internal Node.JS lines from the error stack traces.\n * @param {string} stack The error stack to update.\n * @param {!_cleanStack.Config} [options] Options for the program.\n * @param {boolean} [options.pretty=false] Replace the absolute path to the home directory with the `~`. Default `false`.\n * @param {!Array<string>} [options.ignoredModules=\"\uff3b'pirates'\uff3d\"] Which modules to ignore in the path. Default `\uff3b'pirates'\uff3d`.\n */\nconst cleanStack = (stack, options) => {\n  const {\n    pretty = false, ignoredModules = ['pirates'],\n  } = options || {}\n  const j = ignoredModules.join('|')\n  const re = new RegExp(pathRegex.source.replace('IGNORED_MODULES', j))\n\n  return stack.replace(/\\\\/g, '/')\n    .split('\\n')\n    .filter(x => {\n      const pathMatches = x.match(extractPathRegex)\n      if (pathMatches === null || !pathMatches[1]) {\n        return true\n      }\n\n      const match = pathMatches[1]\n\n      // Electron\n      if (match.includes('.app/Contents/Resources/electron.asar') ||\n        match.includes('.app/Contents/Resources/default_app.asar')) {\n        return false\n      }\n\n      return !re.test(match)\n    })\n    .filter(x => x.trim())\n    .map(x => {\n      if (pretty) {\n        return x.replace(extractPathRegex, (m, p1) => m.replace(p1, p1.replace(homeDir, '~')))\n      }\n\n      return x\n    })\n    .join('\\n')\n}\n\nexport default cleanStack\n\n/* documentary types/index.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_cleanStack.Config} Config Options for the program.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _cleanStack.Config Options for the program.\n * @prop {boolean} [pretty=false] Replace the absolute path to the home directory with the `~`. Default `false`.\n * @prop {!Array<string>} [ignoredModules=\"\uff3b'pirates'\uff3d\"] Which modules to ignore in the path. Default `\uff3b'pirates'\uff3d`.\n */\n","import cleanStack from '@artdeco/clean-stack'\nimport {\n  getCallerFromArguments, getCalleeStackLine, getStackHeading,\n} from './lib'\n\n/**\n * Create a callback.\n * @param {!Function} entryCaller The function which was called at entry.\n * @param {string} entryStack The first line of the error stack to be returned\n * @param {boolean} [shadow=false] Print only entry stack.\n */\nexport function makeCallback(entryCaller, entryStack, shadow = false) {\n  /**\n   * This callback should be called when an asynchronous error occurred.\n   * @param {(string|Error)} messageOrError A message string or an _Error_ object at the point of actual error.\n   * @returns {Error} An error with the updated stack which includes the callee.\n   */\n  function cb(messageOrError) {\n    const caller = getCallerFromArguments(arguments)\n    const { stack: errorStack } = new Error()\n    const calleeStackLine = getCalleeStackLine(errorStack)\n    const isError = messageOrError instanceof Error\n    const message = isError ? messageOrError.message : messageOrError\n\n    const stackHeading = getStackHeading(message)\n    const entryHasCallee = caller !== null && entryCaller === caller\n    const stackMessage = [\n      stackHeading,\n      ...(entryHasCallee || shadow ? [entryStack] : [\n        calleeStackLine,\n        entryStack,\n      ]),\n    ].join('\\n')\n\n    const stack = cleanStack(stackMessage)\n    const properties = { message, stack }\n    const e = isError ? messageOrError : new Error()\n\n    return /** @type {Error} */ (Object.assign(/** @type {!Object} */ (e), properties))\n  }\n\n  return cb\n}","import {\n  getEntryStack, getCallerFromArguments,\n} from './lib'\nimport { makeCallback } from './callback'\n\n/**\n * Returns a function to create an error with a stack trace starting at the line in code when the call was made by the callee.\n * @param {boolean} [transparent] Pretend as if the call to the function lead to the error, without exposing any of the internal stack.\n */\nexport default function erotic(transparent) {\n  const { stack } = new Error()\n  const caller = getCallerFromArguments(arguments)\n  const entryStack = getEntryStack(stack, transparent)\n\n  return makeCallback(caller, entryStack, transparent)\n}","/**\n * Listens for the `error` event once so that when an error in _streamB_ is emitted, is is also emitted in the _streamA_.\n * @param {stream.Stream} streamA The stream that will emit an error once it's caught in the `streamB`.\n * @param {stream.Stream} streamB The stream from which the error originates.\n * @returns The stream the error is listened on, i.e., transparent to calling the `.once` method on that stream.\n */\nexport const pipeError = (streamA, streamB) => {\n  streamB\n    .once('error', e => {\n      streamA.emit('error', e)\n    })\n  return streamB\n}\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('stream').Stream} stream.Stream\n */","import { Writable } from 'stream'\nimport erotic from 'erotic'\nimport cleanStack from '@artdeco/clean-stack'\nimport { pipeError } from './lib'\n\nfunction joinBufferData(array) {\n  return array.join('')\n}\n\n/**\n * A writable stream which collects incoming data into memory, and provides a promise to way for the stream to finish. The promise is resolved with joined chunks.\n */\nexport default class Catchment extends Writable {\n  /**\n   * Create a new catchment to pipe a readable stream into and collect all emitted data.\n   * @param {!_catchment.Options} [options] Options to pass to the `Writable` super constructor, and others shown below.\n   * @param {!stream.Readable} [options.rs] A readable stream to automatically pipe into the catchment. If an error occurs during reading of this stream, the catchment promise will be rejected with it.\n   * @param {boolean} [options.binary=false] Whether to return a raw buffer instead of a string. The string is created by joining all incoming chunks together with `.join('')` method. Default `false`.\n   * @example\n   *\n   * import { createReadStream } from 'fs'\n   * import Catchment from 'catchment'\n   *\n   * const rs = createReadStream('file.txt')\n   * const { promise } = new Catchment({ rs })\n   * const res = await promise\n   */\n  constructor(options) {\n    const {\n      binary = false, rs = null, ...opts\n    } = options || {}\n    /** @suppress {missingProperties} */\n    const { er = erotic(true), proxyError } = options || {}\n    const wrap = (_, e) => er(e)\n    super(/** @type {!stream.WritableOptions} */ (opts))\n    this._caughtData = []\n    this._promise = new Promise((r, j) => {\n      this.on('finish', () => {\n        let d\n        if (binary) {\n          d = Buffer.concat(this._caughtData)\n        } else {\n          d = joinBufferData(this._caughtData)\n        }\n        r(d)\n        this._caughtData = []\n      })\n      this.once('error', (e) => {\n        if (e.stack.indexOf('\\n') == -1) {\n          wrap`${e}`\n          j(e)\n        } else {\n          const stack = cleanStack(e.stack)\n          e.stack = stack\n          if (proxyError) wrap`${e}`\n          j(e)\n        }\n      })\n      if (rs) {\n        pipeError(this, rs).pipe(this)\n      }\n    })\n  }\n  _write(chunk, encoding, callback) {\n    this._caughtData.push(chunk)\n    callback()\n  }\n  /**\n   * A promise which will resolve will all data when the stream finishes.\n   * @type {Promise<string|Buffer>}\n   */\n  get promise() {\n    return this._promise\n  }\n}\n\n/**\n * Collect data into a catchment, and return results when the stream finishes.\n * @param {stream.Readable} readable A readable stream to collect all data from. If an error occurs during reading of this stream, the promise will be rejected with it.\n * @param {_catchment.CollectOptions} options Options when collecting data into a catchment. They can extend `Writable` options which will be passed to the `Catchment` constructor.\n * @param {boolean} [options.binary=false] Whether to return a raw buffer instead of a string. The string is created by joining all incoming chunks together with `.join('')` method. Default `false`.\n * @param {boolean} [options.proxyError=false] Sets whether an error emitted by the stream with have its stack start at the line where the `collect` was called rather than inside of the stream. In other words, hides the implementation of the stream. Default `false`.\n * @example\n *\n * import { collect } from 'catchment'\n * import { createReadStream } from 'fs'\n *\n * const rs = createReadStream(path)\n * await collect(rs, { proxyError: true })\n */\nexport const collect = async (readable, options = {}) => {\n  const { promise } = new Catchment({\n    rs: readable,\n    ...options,\n    er: erotic(true),\n  })\n  const res = await promise\n  return res\n}\n\n/* typal types/index.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_catchment.Options} Options Options to pass to the `Writable` super constructor, and others shown below.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _catchment.Options Options to pass to the `Writable` super constructor, and others shown below.\n * @prop {!stream.Readable} [rs] A readable stream to automatically pipe into the catchment. If an error occurs during reading of this stream, the catchment promise will be rejected with it.\n * @prop {boolean} [binary=false] Whether to return a raw buffer instead of a string. The string is created by joining all incoming chunks together with `.join('')` method. Default `false`.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('stream').Readable} stream.Readable\n */\n\n/* typal types/collect.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_catchment.CollectOptions} CollectOptions Options when collecting data into a catchment. They can extend `Writable` options which will be passed to the `Catchment` constructor.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _catchment.CollectOptions Options when collecting data into a catchment. They can extend `Writable` options which will be passed to the `Catchment` constructor.\n * @prop {boolean} [binary=false] Whether to return a raw buffer instead of a string. The string is created by joining all incoming chunks together with `.join('')` method. Default `false`.\n * @prop {boolean} [proxyError=false] Sets whether an error emitted by the stream with have its stack start at the line where the `collect` was called rather than inside of the stream. In other words, hides the implementation of the stream. Default `false`.\n */\n","import { spawn, fork as forkCp } from 'child_process'\nimport { collect } from 'catchment'\n\n/**\n * @param {!child_process.ChildProcess} proc\n * @returns {!Promise<_spawncommand.PromiseResult>}\n */\nconst getPromise = async (proc) => {\n  const [code, stdout, stderr] = await Promise.all([\n    new Promise((resolve, reject) => {\n      proc.on('error', reject)\n        .on('exit', (code) => {\n          resolve(code)\n        })\n    }),\n    proc.stdout ? collect(proc.stdout) : undefined,\n    proc.stderr ? collect(proc.stderr) : undefined,\n  ])\n  return {\n    code,\n    stdout,\n    stderr,\n  }\n}\n\n/**\n * Spawns a new process using the `command` and returns an instance of a ChildProcess, extended to have a `promise` property which is resolved when the process exits. The resolved value is an object with `stdout`, `stderr` and `code` properties.\n * @param {string} command The command to run.\n * @param {!Array<string>} [args] List of string arguments.\n * @param {!child_process.SpawnOptions} [options] Options used to spawn.\n */\nexport default function spawnCommand(command, args, options) {\n  if (!command) throw new Error('Please specify a command to spawn.')\n  const proc = /** @type {!_spawncommand.ChildProcessWithPromise} */ (spawn(command, args, options))\n\n  const promise = getPromise(proc)\n  proc.promise = promise\n  /** @suppress {checkTypes} */\n  proc.spawnCommand = proc['spawnargs'].join(' ')\n  return proc\n}\n\n/**\n * Forks a process and assign a `promise` property to it, resolved with `stderr`, `stdout` and `code` properties on exit.\n * @param {string} mod The module to run in the child.\n * @param {!Array<string>} [args] List of string arguments.\n * @param {!child_process.ForkOptions} [options] Options to fork the process with.\n */\nexport function fork(mod, args, options) {\n  if (!mod) throw new Error('Please specify a module to fork')\n  const proc = /** @type {!_spawncommand.ChildProcessWithPromise} */ (forkCp(mod, args, options))\n\n  const promise = getPromise(proc)\n  proc.promise = promise\n  /** @suppress {checkTypes} */\n  proc.spawnCommand = proc['spawnargs'].join(' ')\n  return proc\n}\n\n/* typal types/index.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_spawncommand.PromiseResult} PromiseResult\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _spawncommand.PromiseResult\n * @prop {string} stdout The accumulated result of the `stdout` stream.\n * @prop {string} stderr The accumulated result of the `stderr` stream.\n * @prop {number} code The code with which the process exited.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('child_process').SpawnOptions} child_process.SpawnOptions\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('child_process').ForkOptions} child_process.ForkOptions\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('child_process').ChildProcess} child_process.ChildProcess\n */\n\n/* documentary types/cp.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_spawncommand.ChildProcessWithPromise} ChildProcessWithPromise A child process with an extra `promise` property.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {child_process.ChildProcess & _spawncommand.$ChildProcessWithPromise} _spawncommand.ChildProcessWithPromise A child process with an extra `promise` property.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _spawncommand.$ChildProcessWithPromise A child process with an extra `promise` property.\n * @prop {!Promise<!_spawncommand.PromiseResult>} promise A promise resolved when the process exits.\n * @prop {string} spawnCommand The spawn arguments joined by whitespace.\n */\n","export default path\nexport const {\n  basename,\n  delimiter,\n  dirname,\n  extname,\n  format,\n  isAbsolute,\n  join,\n  normalize,\n  parse,\n  posix,\n  relative,\n  resolve,\n  sep,\n  win32,\n} = path","export default fs\nexport const {\n  ReadStream,\n  Stats,\n  WriteStream,\n  access,\n  accessSync,\n  appendFile,\n  appendFileSync,\n  chmod,\n  chmodSync,\n  chown,\n  chownSync,\n  close,\n  closeSync,\n  constants,\n  copyFile,\n  copyFileSync,\n  createReadStream,\n  createWriteStream,\n  exists,\n  existsSync,\n  fchmod,\n  fchmodSync,\n  fchown,\n  fchownSync,\n  fdatasync,\n  fdatasyncSync,\n  fstat,\n  fstatSync,\n  fsync,\n  fsyncSync,\n  ftruncate,\n  ftruncateSync,\n  futimes,\n  futimesSync,\n  lchmod,\n  lchmodSync,\n  lchown,\n  lchownSync,\n  link,\n  linkSync,\n  lstat,\n  lstatSync,\n  mkdir,\n  mkdirSync,\n  mkdtemp,\n  mkdtempSync,\n  open,\n  openSync,\n  read,\n  readFile,\n  readFileSync,\n  readSync,\n  readdir,\n  readdirSync,\n  readlink,\n  readlinkSync,\n  realpath,\n  realpathSync,\n  rename,\n  renameSync,\n  rmdir,\n  rmdirSync,\n  stat,\n  statSync,\n  symlink,\n  symlinkSync,\n  truncate,\n  truncateSync,\n  unlink,\n  unlinkSync,\n  unwatchFile,\n  utimes,\n  utimesSync,\n  watch,\n  watchFile,\n  write,\n  writeFile,\n  writeFileSync,\n  writeSync,\n} = fs","import Diff from './diff'\n\nconst colors = {\n  'black': 30,\n  'red': 31,\n  'green': 32,\n  'yellow': 33,\n  'blue': 34,\n  'magenta': 35,\n  'cyan': 36,\n  'white': 37,\n  'grey': 90,\n}\n\nconst backgroundColors = {\n  'black': 40,\n  'red': 41,\n  'green': 42,\n  'yellow': 43,\n  'blue': 44,\n  'magenta': 45,\n  'cyan': 46,\n  'white': 47,\n}\n\n/**\n * Color the foreground.\n * @param {string} string The string to color.\n * @param {_erte.Color} color The color to apply.\n */\nexport function c(string, color) {\n  const cc = colors[color]\n  if (!cc) return string\n  return `\\x1b[${cc}m${string}\\x1b[0m`\n}\n\n/**\n * Color the background.\n * @param {string} string The string to color.\n * @param {_erte.Color} color The color to apply.\n */\nexport function b(string, color) {\n  const cc = backgroundColors[color]\n  if (!cc) return string\n  return `\\x1b[${cc}m${string}\\x1b[0m`\n}\n\n/**\n * Compares two strings and outputs a coloured version where strings don't match.\n * @param {string} source A string to compare.\n * @param {string} target Target string to compare with.\n * @returns {string} A string which uses shell-codes to highligh differences.\n */\nexport default function erte(source, target) {\n  const diff = new Diff()\n  const d = diff.diff(source, target)\n  const m = d.map(({ added, removed, value }) => {\n    let p\n    const s = value.split(' ')\n    if (added) {\n      p = s.map(t => {\n        return t.replace(/\\n$/mg, '\u23ce\\n')\n      }).map(t => c(t, 'green')).join(b(' ', 'green'))\n    } else if (removed) {\n      p = s.map(t => {\n        return t.replace(/\\n$/mg, '\u23ce\\n')\n      }).map(t => c(t, 'red')).join(b(' ', 'red'))\n    } else {\n      p = c(value, 'grey')\n    }\n    return p\n  })\n  const s = m.join('')\n  return s\n}\n\n/* documentary types/index.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_erte.Color} Color The color to apply.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {('black'|'red'|'green'|'yellow'|'blue'|'magenta'|'cyan'|'white'|'grey')} _erte.Color The color to apply.\n */\n","import { resolve } from 'path'\nimport { unlinkSync } from 'fs'\nimport { c } from 'erte'\n\n/**\n * Checks config and returns arguments.\n * @param {string|!Array<string>} css The resolved path to the CSS file to compile.\n * @param {!_artdeco.ClosureStylesheetsConfig} config Configuration.\n * @param {!Function} log\n */\nexport const prepareArgs = (css, config, log = console.log) => {\n  if (typeof config != 'object') throw new Error('Config is expected as an object.')\n  const { rootSelector, path } = config\n  if (!path) throw new Error('Path to closure stylesheets JAR wasn\\'t passed.')\n  if (rootSelector && !/^[.#]/.test(rootSelector)) {\n    throw new Error(`The root selector (${rootSelector}) must be either a class name or an ID.`)\n  }\n  if (!Array.isArray(css)) css = [css]\n  css = css.map(s => `\"${s}\"`)\n\n  // this is a temp file\n  let outputRenamingMap\n  const { whitelist, rename = 'SIMPLE' } = config\n\n  if (rename) outputRenamingMap = 'temp-rename-map' + '.json'\n  const closureArgs = getArgs({\n    ...config,\n    outputRenamingMap,\n    excludedClassesFromRenaming: whitelist,\n    rootSelector,\n    rename,\n  })\n\n  const args = ['-jar', path,\n    ...css,\n    ...closureArgs,\n  ]\n  const s = 'java ' + args.join(' ')\n  log(c(s, 'grey'))\n\n  /**\n   * Returns the rename map, or null after compilation.\n   * @return {Object}\n   */\n  const getMap = () => {\n    if (outputRenamingMap) {\n      const mapPath = resolve(outputRenamingMap)\n      delete require.cache[mapPath]\n      const renameMap = require(mapPath)\n      unlinkSync(mapPath)\n      return renameMap\n    }\n    return null\n  }\n\n  return { args, getMap }\n}\n\n/**\n * Transforms config into options.\n * @param {!_artdeco.ClosureStylesheetsConfig} config\n */\nconst getArgs = (config) => {\n  const args = []\n  const { prettyPrint, sourceMap, allowUnrecognizedProperties,\n    expandBrowserPrefix, skipHTMLEscaping, rootSelector, rename, outputRenamingMap,\n    preserveImportantComments, cssRenamingPrefix, excludedClassesFromRenaming,\n    inputRenamingMap, outputBrowserPrefix, prefixes,\n  } = config\n  if (skipHTMLEscaping) args.push('--skip-html-escaping')\n\n  if (expandBrowserPrefix || outputBrowserPrefix) args.push('--expand-browser-prefix')\n  if (outputBrowserPrefix) args.push('--output-browser-prefix', outputBrowserPrefix)\n\n  if (prettyPrint) args.push('--pretty-print')\n  if (sourceMap) args.push('--output-source-map', sourceMap)\n  if (rootSelector) args.push('--root-selector', rootSelector)\n  if (allowUnrecognizedProperties) args.push('--allow-unrecognized-properties')\n  if (preserveImportantComments) args.push('--preserve-important-comments')\n  if (cssRenamingPrefix) args.push('--css-renaming-prefix', cssRenamingPrefix)\n\n  if (inputRenamingMap) {\n    args.push('--input-renaming-map', inputRenamingMap)\n    args.push('--input-renaming-map-format', 'JSON')\n  }\n\n  if (outputRenamingMap) {\n    args.push('--output-renaming-map', outputRenamingMap)\n    args.push('--output-renaming-map-format', 'JSON')\n  }\n  if (rename) args.push('--rename', rename)\n\n  if (excludedClassesFromRenaming) excludedClassesFromRenaming.forEach((cl) => {\n    args.push('--excluded-classes-from-renaming', cl)\n  })\n  if (prefixes) prefixes.forEach((cl) => {\n    args.push('--prefixes', cl)\n  })\n  return args\n}\n\n/**\n * If Closure Stylesheets exited with non-zero status, parses the error.\n * @param {string} stderr\n */\nexport const parseStatus = (stderr) => {\n  const e = stderr.split('\\n')\n  if (e[0].startsWith('Compiler parsing error: Parse error')) {\n    const line = e[4]\n    // const line = name\n    const parsed = /at line ([\\d,]+) column ([\\d,]+)/.exec(line)\n    if (parsed) {\n      let [, l, col] = parsed\n      l = parseInt(l.replace(/,/g, ''), 10)\n      col = parseInt(col.replace(/,/g, ''), 10)\n      const source = e[5]\n      /** @type {string} */\n      const sourceLine = source.split('\\n')[l - 1]\n      const pre = sourceLine.slice(Math.max(0, col - 20), col)\n      const act = sourceLine.slice(col, col + 20)\n      const post = sourceLine.slice(col + 20, col +\n        (process.stdout.columns ? process.stdout.columns - 42 : 100))\n      const p = '\\n' + ' '.repeat(20) + '^'\n      const block = [\n        c(pre, 'grey'),\n        c(act, 'red'),\n        c(post, 'grey'),\n        p,\n        e.slice(7).join('\\n'),\n      ].join('')\n      return block\n    }\n  }\n}\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('..').ClosureStylesheetsConfig} _artdeco.ClosureStylesheetsConfig\n */","import '../types/externs'\nimport compileStylesheets, { compileStylesheetsSync } from './'\n\n/*!\n * closure-stylesheets: API to Closure Stylesheets.\n *\n * Copyright (C) 2020  Art Deco\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nmodule.exports = {\n  '_compileStylesheets': compileStylesheets,\n  '_compileStylesheetsSync': compileStylesheetsSync,\n}","import { spawnSync } from 'child_process'\nimport spawn from 'spawncommand'\nimport { prepareArgs, parseStatus } from './lib'\n\n/**\n * @type {_artdeco.compileStylesheetsSync}\n */\nexport function compileStylesheetsSync(css, config, log = console.log) {\n  const { args, getMap } = prepareArgs(css, config, log)\n  let { stderr, stdout: stylesheet, status } = spawnSync('java', args,\n    /** @type {!child_process.SpawnSyncOptions} */ ({\n      shell: true,\n    }))\n  stderr = stderr.toString()\n  stylesheet = stylesheet.toString()\n\n  if (status) {\n    const block = parseStatus(stderr)\n    return { status, stderr, block }\n  }\n  const renameMap = getMap()\n\n  return { renameMap, stylesheet }\n}\n\n/**\n * @type {_artdeco.compileStylesheets}\n */\nasync function compileStylesheets(css, config, log = console.log) {\n  const { args, getMap } = prepareArgs(css, config, log)\n  const { promise } = spawn('java', args,\n    /** @type {!child_process.SpawnOptions} */ ({\n      shell: true,\n    }))\n  const { stderr, stdout: stylesheet, code } = await promise\n\n  if (code) {\n    const block = parseStatus(stderr)\n    return { status: code, stderr, block }\n  }\n  const renameMap = getMap()\n\n  return { renameMap, stylesheet }\n}\n\nexport default compileStylesheets\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../types').compileStylesheets} _artdeco.compileStylesheets\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../types').compileStylesheetsSync} _artdeco.compileStylesheetsSync\n */"],
"names":["spawn","child_process","spawnSync","Writable","stream","getStackSegment","stack","from","oneLine","splitStack","split","undefined","item","length","slice","items","join","getEntryStack","transparent","stackSegment","getCallerFromArguments","args","caller","homedir","os","extractPathRegex","pathRegex","homeDir","cleanStack","pretty","ignoredModules","j","re","RegExp","source","replace","filter","x","pathMatches","match","includes","test","trim","map","m","p1","makeCallback","entryCaller","entryStack","shadow","cb","messageOrError","arguments","errorStack","Error","calleeStackLine","message","isError","stackMessage","stackHeading","Object","assign","e","properties","erotic","pipeError","streamA","streamB","once","emit","Catchment","options","binary","rs","opts","er","proxyError","wrap","_","_caughtData","_promise","Promise","r","on","d","Buffer","concat","indexOf","pipe","chunk","encoding","callback","push","collect","readable","promise","res","getPromise","proc","code","stdout","stderr","all","resolve","reject","path","unlinkSync","fs","colors","c","string","color","cc","prepareArgs","css","config","log","console","rootSelector","Array","isArray","s","outputRenamingMap","whitelist","rename","closureArgs","getArgs","excludedClassesFromRenaming","getMap","mapPath","require","cache","renameMap","prettyPrint","sourceMap","allowUnrecognizedProperties","expandBrowserPrefix","preserveImportantComments","cssRenamingPrefix","inputRenamingMap","outputBrowserPrefix","prefixes","skipHTMLEscaping","forEach","cl","parseStatus","startsWith","parsed","exec","line","l","col","parseInt","sourceLine","pre","Math","max","act","post","process","columns","p","repeat","block","module","exports","compileStylesheets","command","shell","spawnCommand","stylesheet","status","compileStylesheetsSync","toString"]
}
